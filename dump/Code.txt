package claims.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Optional;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import claims.service.ClaimsService;
import helpers.app.AppHelpers;
import helpers.app.AppResponse;

/**
 * Servlet implementation class CreateClaim
 */
@WebServlet("/CreateClaim")
public class CreateClaim extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private ClaimsService claimsService;

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public CreateClaim() {
		super();
		claimsService = new ClaimsService();
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		// Authenticated Request
		int userID = getUserID(request, response);
		if (userID == -1) {
			response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized Request/Please Login");
			return;
		}

		Enumeration<String> paramNames = request.getParameterNames();
		// Error Checking... If any details are missing error will be thrown
		ArrayList<String> errors = new ArrayList<String>();
		while (paramNames.hasMoreElements()) {
			String paramName = (String) paramNames.nextElement();
			String value = request.getParameter(paramName);
			if (value.isEmpty()) {
				errors.add(paramName);
			}
		}

		String registrationID = request.getParameter("reg_id");

		RequestDispatcher rd;
		String url = String.format("/create-claim.jsp?id=%s&status=", registrationID);
		if (errors.size() > 0) {
			rd = request.getRequestDispatcher(url + "false");
			rd.forward(request, response);
			return;
		}

		String category = request.getParameter("category");
		String description = request.getParameter("description");

		AppResponse<Integer> res = claimsService.createClaimRequest(userID, Integer.valueOf(registrationID), category, description);
		if(res.hasError() || res.getPayload() == 0) {
			rd = request.getRequestDispatcher(url + "false");
			rd.forward(request, response);
			return;
		}
		rd = request.getRequestDispatcher(url + "true");
		rd.forward(request, response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doGet(request, response);
	}

	private int getUserID(HttpServletRequest request, HttpServletResponse response) {
		int userID = -1;
		Optional<String> userCookie = AppHelpers.getCookie(request, AppHelpers.USER_ID);
		if (userCookie.isPresent()) {
			userID = Integer.valueOf(userCookie.get());
		}
		return userID;
	}

}



package users.dao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;


import database.Database;
import users.model.Users;

public class UsersDao {
	private static UsersDao instance;

	private Connection connection;
	public UsersDao() {
		connection = Database.getConnection();
	}

	//SingleTon
	public static UsersDao getUsersDaoInstance() {
		if(instance == null) {
			return new UsersDao();
		}
		return instance;
	}

	public int createUserAccount(Users user) {
		String sqlQuery = "INSERT INTO users(name,email,hash,salt,mobile,address, role_id) VALUES(?,?,?,?,?,?,0)";
		try {
			PreparedStatement pstmt = (PreparedStatement) connection.prepareStatement(sqlQuery);
			pstmt.setString(1, user.getName());
			pstmt.setString(2, user.getEmail());
			pstmt.setString(3, user.getHash());
			pstmt.setBytes(4, user.getSalt());
			pstmt.setString(5, user.getMobileNo());
			pstmt.setString(6, user.getAddress());
			pstmt.executeUpdate();
			pstmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
			return 0;
		}
		return 1;
	}

    public boolean isUserExists(String email) {
    	boolean userExists = false;
		try{
			String sqlQuery = "SELECT email from users where email=?";
			PreparedStatement pstmt = (PreparedStatement) connection.prepareStatement(sqlQuery);
			pstmt.setString(1, email);
			ResultSet rs= pstmt.executeQuery();
			if(rs.isBeforeFirst()) {
				userExists = true;
			}
			pstmt.close();
		} catch(Exception e){
		     e.printStackTrace();
		}
		return userExists;
    }

    public Users getUserLoginDetails(String email) {
    	Users user = new Users();
		try{
			String sqlQuery = "SELECT email,hash,salt,name,role_id,id from users where email=?";
			PreparedStatement pstmt = (PreparedStatement) connection.prepareStatement(sqlQuery);
			pstmt.setString(1, email);
			ResultSet rs= pstmt.executeQuery();
			while(rs.next()){
				user.setEmail(rs.getString(1));
				user.setHash(rs.getString(2));
				user.setSalt(rs.getBytes(3));
				user.setName(rs.getString(4));
				user.setRole_id(rs.getInt(5));
				user.setId(rs.getInt(6));
			}
			pstmt.close();
		} catch(Exception e){
		     e.printStackTrace();
		}
		return user;
    }

    public List<Users> getAllUsers(String searchParam) {
    	String searchQuery;
    	PreparedStatement pstmt;
		List<Users> users = new ArrayList<Users>();
		try {
			if(searchParam== null || (searchParam.length() == 0)) {
	    		searchQuery = "SELECT * FROM users;";
				pstmt = (PreparedStatement) connection.prepareStatement(searchQuery);
	    	} else {
	    		searchQuery = "SELECT * FROM users where name=? OR address=? OR email=?";
				pstmt = (PreparedStatement) connection.prepareStatement(searchQuery);
				pstmt.setString(1, searchParam);
				pstmt.setString(2, searchParam);
				pstmt.setString(3, searchParam);
	    	}
			ResultSet rs= pstmt.executeQuery();
			while(rs.next()) {
				 Users user = new Users();
				 user.setId(rs.getInt("id"));
				 user.setName(rs.getString("name"));
				 user.setEmail(rs.getString("email"));
				 user.setMobileNo(rs.getString("mobile"));
				 user.setIsCreatedAt(rs.getDate("is_created_at"));
				 users.add(user);
				}
			pstmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
			return new ArrayList<Users>(); //Empty Array
		}
		return users;
	}
}
package users.model;

import java.util.Date;

public class Users {
	private int id;
	private String name;
	private String email;
	private String hash;
	private byte[] salt;
	private String address;
	private int role_id;
	private Date isCreatedAt;
	private String mobileNo;
	public Users() {

	}
	public Users(int id, String name, String email, String hash, byte[] salt, String address,String mobileNo, int role_id,
			Date isCreatedAt) {
		super();
		this.id = id;
		this.name = name;
		this.email = email;
		this.hash = hash;
		this.salt = salt;
		this.address = address;
		this.role_id = role_id;
		this.isCreatedAt = isCreatedAt;
		this.mobileNo = mobileNo;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getHash() {
		return hash;
	}
	public void setHash(String hash) {
		this.hash = hash;
	}
	public byte[] getSalt() {
		return salt;
	}
	public void setSalt(byte[] salt) {
		this.salt = salt;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public Date getIsCreatedAt() {
		return isCreatedAt;
	}
	public void setIsCreatedAt(Date isCreatedAt) {
		this.isCreatedAt = isCreatedAt;
	}
	public String getMobileNo() {
		return mobileNo;
	}
	public void setMobileNo(String mobileNo) {
		this.mobileNo = mobileNo;
	}
	public int getRole_id() {
		return role_id;
	}
	public void setRole_id(int role_id) {
		this.role_id = role_id;
	}

}
